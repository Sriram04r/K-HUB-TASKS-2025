{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMNQvmpWtcjc1mFxZSw8+Z0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sriram04r/K-HUB-TASKS-2025/blob/main/K-HUB%20TASK%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "95IqTRvhKYdx",
        "outputId": "33185e07-cd56-4168-bf23-e11fb52b58bd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "kian\n"
          ]
        }
      ],
      "source": [
        "# Write a program to get a string made of first 2 and last 2 characters from a given string.If string less than 2 return instead of empty string.\n",
        "\n",
        "\n",
        "def string_name(string):\n",
        "  if len(string) < 2:\n",
        "    return ' '\n",
        "  return string[0:2] + string[-2:]\n",
        "print(string_name('kiran'))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Write a python program to sum all the items in the list.\n",
        "\n",
        "# Condition 1\n",
        "\n",
        "\n",
        "list = [1,2,3,4]\n",
        "print(sum(list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A6k10Z87PMVL",
        "outputId": "5eb0cc82-2274-43d2-fa4e-9450963317d5"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# condition 2\n",
        "\n",
        "def sum(element):\n",
        "  sum = 0\n",
        "  for i in element:\n",
        "    sum += i\n",
        "  return sum\n",
        "print(sum([1,2,3,4]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oFI7a5b2PvJ4",
        "outputId": "cf383811-e780-4111-ffbe-507dda9fca89"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Even or Odd checker\n",
        "\n",
        "num = int(input('Enter a number:'))\n",
        "if num % 2 == 0:\n",
        "  print('It is Even')\n",
        "else:\n",
        "  print('It is Odd')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZgfjVk2kWICk",
        "outputId": "dfab53d6-1a9f-4875-c626-95a6b78caa8a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number:2\n",
            "It is Even\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# sum of first N numbers\n",
        "\n",
        "def sum(n):\n",
        "  total = 0\n",
        "  for i in range(1, n+1):\n",
        "    total += i\n",
        "  return total\n",
        "print(sum(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4SAzSzuyW78K",
        "outputId": "d3df803d-8645-46f7-fc78-d886ffda0a8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find the largest number\n",
        "\n",
        "# Condition 1\n",
        "\n",
        "def find_largest_number(numbers):\n",
        "  largest = numbers[0]\n",
        "  for number in numbers:\n",
        "    if number > largest:\n",
        "      largest = number\n",
        "  return largest\n",
        "\n",
        "list = [1,23,44,99,3,4]\n",
        "print(find_largest_number(list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O8pceTyCdCJm",
        "outputId": "4118c677-5bc5-4008-e83f-554604a7805c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "99\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# condition 2\n",
        "\n",
        "list = [11,22,3,234]\n",
        "print(max(list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hxes54zmfgHk",
        "outputId": "86f5af27-0f18-41a6-da77-82941cdf282c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "234\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# reverse a string\n",
        "\n",
        "# condition 1\n",
        "\n",
        "str = 'madam'\n",
        "print(str[::-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v8zWrQjMf1aX",
        "outputId": "56a22096-3d4e-4fa6-c9de-b49ea24e7116"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "madam\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# condition 2\n",
        "\n",
        "def reverse(string):\n",
        "  reverse = ''\n",
        "  for i in string:\n",
        "    reverse += i\n",
        "  return reverse\n",
        "print(reverse('madam'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5fKHHuafgpZ3",
        "outputId": "62587678-3a73-4207-9885-deb7b48d18da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "madam\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59905abe",
        "outputId": "4de05d91-1cf5-4558-e7cc-c3aa11020545"
      },
      "source": [
        "# Find smallest number\n",
        "\n",
        "def smallest_number(numbers):\n",
        "  smallest = numbers[0]\n",
        "  for number in numbers:\n",
        "    if number < smallest:\n",
        "      smallest = number\n",
        "  return smallest\n",
        "\n",
        "list = [1,23,234,123,0]\n",
        "print(smallest_number(list))\n",
        "\n",
        "# 0r\n",
        "\n",
        "list = [23,33,22,1,9]\n",
        "print(min(list))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# count of even numbers\n",
        "\n",
        "def count_even_numbers(numbers):\n",
        "  count = 0\n",
        "  for number in numbers:\n",
        "    if number % 2 == 0:\n",
        "      count += 1\n",
        "  return count\n",
        "\n",
        "\n",
        "list = [2,32,34,34,0]\n",
        "print(count_even_numbers(list))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A5n7yi7nlHvb",
        "outputId": "7d9d58ca-a05b-4287-84d9-63c39f81697d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# sum of all numbers in list\n",
        "\n",
        "\n",
        "def sum_of_numbers(numbers):\n",
        "  sum = 0\n",
        "  for number in numbers:\n",
        "    sum += number\n",
        "  return sum\n",
        "\n",
        "list = [1,33,23,23,44]\n",
        "print(sum_of_numbers(list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "01VikoVunGYN",
        "outputId": "8e9087fb-8377-499f-95ea-27c103456c71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "124\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check if a number is existing in a list\n",
        "\n",
        "a = int(input('Enter a value:'))\n",
        "\n",
        "def number_exist(check_list, number_to_check):\n",
        "  if number_to_check in check_list:\n",
        "    return \"yes\"\n",
        "  else:\n",
        "    return \"no\"\n",
        "\n",
        "my_list = [1,3,4,5]\n",
        "print(number_exist(my_list, a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_LhxwA-Ppdnx",
        "outputId": "c02f1561-1af8-4005-f37a-3b5ba0efd324"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a value:3\n",
            "yes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicates from alist\n",
        "\n",
        "list = [1,2,1,3,3,4,56,44]\n",
        "list2 = tuple(set(list))\n",
        "print(list2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I-amRIKMrqEh",
        "outputId": "c79be13f-c10c-4eda-88f8-7e2ad7a5a297"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3, 4, 44, 56)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# sum of all odd numbers ina list\n",
        "\n",
        "def all_odd_numbers(numbers):\n",
        "  odd_numbers = 0\n",
        "  for number in numbers:\n",
        "     if number % 2 != 0:\n",
        "      odd_numbers += 1\n",
        "  return odd_numbers\n",
        "\n",
        "list = [1,2,3,4,5,7]\n",
        "print(all_odd_numbers(list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lRN7uNIMt3Zz",
        "outputId": "1fb53520-8e18-4819-d816-615b3b3ed5bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    }
  ]
}